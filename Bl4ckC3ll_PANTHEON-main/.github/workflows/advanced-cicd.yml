name: Advanced CI/CD Pipeline with Comprehensive Testing

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 4 * * 1,3,5'  # Monday, Wednesday, Friday at 4 AM
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: true
        default: 'full'
        type: choice
        options:
        - quick
        - full
        - stress
        - security-only
      target_environment:
        description: 'Target environment'
        required: true
        default: 'testing'
        type: choice
        options:
        - testing
        - staging
        - production

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  GO_VERSION: '1.21'

jobs:
  # Pre-flight checks
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      python_changed: ${{ steps.changes.outputs.python }}
      js_changed: ${{ steps.changes.outputs.js }}
      docs_changed: ${{ steps.changes.outputs.docs }}
      config_changed: ${{ steps.changes.outputs.config }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            python:
              - '**/*.py'
              - 'requirements.txt'
              - 'pyproject.toml'
            js:
              - '**/*.js'
              - '**/*.ts'
              - 'package*.json'
              - '*.config.js'
            docs:
              - '**/*.md'
              - '**/*.rst'
              - 'docs/**'
            config:
              - '*.yaml'
              - '*.yml'
              - '*.json'
              - '.github/**'

  # Security and code quality matrix
  security-matrix:
    name: Security & Quality (${{ matrix.check-type }})
    runs-on: ubuntu-latest
    needs: preflight
    strategy:
      fail-fast: false
      matrix:
        check-type:
          - 'python-security'
          - 'js-security'
          - 'dependency-check'
          - 'secret-scan'
          - 'license-check'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        if: matrix.check-type == 'python-security' || matrix.check-type == 'dependency-check'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        if: matrix.check-type == 'js-security'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        if: matrix.check-type == 'python-security' || matrix.check-type == 'dependency-check'
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety semgrep

      - name: Install Node.js dependencies
        if: matrix.check-type == 'js-security'
        run: npm ci

      - name: Run Python Security Scan
        if: matrix.check-type == 'python-security'
        run: |
          echo "🔍 Running Bandit security scan..."
          bandit -r . -f json -o bandit-report.json || true
          
          echo "🔍 Running Semgrep security scan..."
          semgrep --config=auto --json --output=semgrep-report.json . || true
          
          echo "🔍 Running custom security validator..."
          python3 scripts/security_validator.py

      - name: Run JavaScript Security Scan
        if: matrix.check-type == 'js-security'
        run: |
          echo "🔍 Running ESLint security scan..."
          npx eslint --config .eslintrc-security.json --format json --output-file eslint-security-report.json . || true
          
          echo "🔍 Running npm audit..."
          npm audit --audit-level=moderate --json > npm-audit-report.json || true

      - name: Run Dependency Security Check
        if: matrix.check-type == 'dependency-check'
        run: |
          echo "🔍 Running Safety dependency check..."
          safety check --json --output safety-report.json || true
          
          echo "🔍 Running pip-audit..."
          pip install pip-audit
          pip-audit --format=json --output=pip-audit-report.json || true

      - name: Run Secret Scanning
        if: matrix.check-type == 'secret-scan'
        run: |
          echo "🔍 Running secret scanning..."
          # Install truffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          trufflehog filesystem . --json > trufflehog-report.json || true

      - name: Run License Check
        if: matrix.check-type == 'license-check'
        run: |
          echo "🔍 Running license compatibility check..."
          pip install pip-licenses
          pip-licenses --format=json --output-file=python-licenses.json || true
          
          if [ -f package.json ]; then
            npx license-checker --json --out js-licenses.json || true
          fi

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ matrix.check-type }}
          path: |
            *-report.json
            *.json
          retention-days: 30

  # Multi-platform testing matrix
  test-matrix:
    name: Tests (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: [preflight, security-matrix]
    if: needs.preflight.outputs.python_changed == 'true' || github.event_name == 'schedule'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for cost optimization
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Set up Go (for security tools)
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install system dependencies (Ubuntu/macOS)
        if: runner.os != 'Windows'
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y curl wget git nmap dnsutils whois
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install nmap
          fi

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install nmap --yes

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-xdist pytest-cov pytest-benchmark

      - name: Install security tools
        if: runner.os != 'Windows'
        run: |
          # Install essential Go-based security tools
          go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Run comprehensive test suite
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "🧪 Running enhanced test suite..."
          python enhanced_test_suite.py
          
          echo "🧪 Running integration tests..."
          python final_integration_test.py || true
          
          echo "🧪 Running automation tests..."
          python test_automation_integration.py || true

      - name: Run performance benchmarks
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        run: |
          echo "⚡ Running performance benchmarks..."
          python scripts/performance_tester.py

      - name: Run stress tests
        if: github.event.inputs.test_level == 'stress' && matrix.os == 'ubuntu-latest'
        timeout-minutes: 30
        run: |
          echo "💪 Running stress tests..."
          for i in {1..10}; do
            echo "Stress test iteration $i"
            python enhanced_test_suite.py || break
          done

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        run: |
          pip install coverage
          coverage run --source=. enhanced_test_suite.py
          coverage xml -o coverage.xml
          coverage html -d coverage_html

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            coverage.xml
            coverage_html/
            performance-report.json
            *-report.json
          retention-days: 30

  # Documentation and validation
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.docs_changed == 'true' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Validate documentation
        run: |
          python scripts/docs_validator.py

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'

      - name: Upload documentation reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docs-validation-results
          path: |
            docs-validation-report.json
          retention-days: 7

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [security-matrix, test-matrix, docs-validation]
    if: github.ref == 'refs/heads/main' || github.event.inputs.target_environment == 'production'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run deployment pre-checks
        run: |
          echo "🚀 Running deployment readiness checks..."
          
          # Check configuration validity
          python -c "import json; json.load(open('p4nth30n.cfg.json'))"
          echo "✅ Configuration valid"
          
          # Check all required files exist
          required_files=("bl4ckc3ll_p4nth30n.py" "requirements.txt" "README.md")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Missing required file: $file"
              exit 1
            fi
          done
          echo "✅ All required files present"
          
          # Check version consistency
          python -c "
          import json
          with open('package.json') as f:
              pkg_version = json.load(f)['version']
          # Add version checks here
          print(f'Version: {pkg_version}')
          "

      - name: Generate deployment artifact
        run: |
          echo "📦 Creating deployment package..."
          tar -czf bl4ckc3ll-pantheon-${{ github.sha }}.tar.gz \
            --exclude='.git*' \
            --exclude='node_modules' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='coverage*' \
            --exclude='*-report.json' \
            .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: bl4ckc3ll-pantheon-${{ github.sha }}.tar.gz
          retention-days: 90

  # Final status report
  status-report:
    name: Pipeline Status Report
    runs-on: ubuntu-latest
    needs: [security-matrix, test-matrix, docs-validation, deployment-check]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate comprehensive report
        run: |
          echo "📊 Generating pipeline status report..."
          
          # Create summary report
          cat > pipeline-summary.md << 'EOF'
          # 🛡️ Bl4ckC3ll_PANTHEON CI/CD Pipeline Report
          
          ## 📊 Pipeline Summary
          - **Trigger**: ${{ github.event_name }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## 🧪 Test Results
          EOF
          
          # Add security results
          if ls security-reports-*/bandit-report.json 1> /dev/null 2>&1; then
            echo "- ✅ Security scans completed" >> pipeline-summary.md
          else
            echo "- ⚠️ Security scans had issues" >> pipeline-summary.md
          fi
          
          # Add test results
          if ls test-results-*/coverage.xml 1> /dev/null 2>&1; then
            echo "- ✅ Test coverage generated" >> pipeline-summary.md
          else
            echo "- ⚠️ Test coverage incomplete" >> pipeline-summary.md
          fi
          
          echo "## 📁 Artifacts Generated" >> pipeline-summary.md
          find . -name "*.json" -o -name "*.xml" -o -name "*.tar.gz" | sort >> pipeline-summary.md

      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-status-report
          path: pipeline-summary.md
          retention-days: 30

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('pipeline-summary.md')) {
              const report = fs.readFileSync('pipeline-summary.md', 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }